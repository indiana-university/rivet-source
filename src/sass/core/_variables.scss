// Copyright (C) 2018 The Trustees of Indiana University
// SPDX-License-Identifier: BSD-3-Clause

// Global class name prefix
$prefix: "rvt";

// Base font family

$font-base: "BentonSans", "Helvetica Neue", "Helvetica", "sans-serif" !default;

// Main type sizes map. This is used to generate all of the .ts-
// utility classes in "components/_type-scale.scss"

// $key = pixel size, $value = relational units

$type-sizes: (
  12: .75rem,
  xxs: .75rem,
  14: .875rem,
  xs: .875rem,
  16: 1rem,
  base: 1rem,
  18: 1.125rem,
  20: 1.25rem,
  sm: 1.25rem,
  23: 1.4375rem,
  26: 1.625rem,
  md: 1.625rem,
  29: 1.8125rem,
  32: 2rem,
  lg: 2rem,
  36: 2.25rem,
  41: 2.5625rem,
  xl: 2.5625rem,
  46: 2.875rem,
  52: 3.25rem,
  xxl: 3.25rem,
) !default;

// Type Size variables

$ts-12: map-get($type-sizes, 12) !default;
$ts-14: map-get($type-sizes, 14) !default;
$ts-16: map-get($type-sizes, 16) !default;
$ts-18: map-get($type-sizes, 18) !default;
$ts-20: map-get($type-sizes, 20) !default;
$ts-23: map-get($type-sizes, 23) !default;
$ts-26: map-get($type-sizes, 26) !default;
$ts-29: map-get($type-sizes, 29) !default;
$ts-32: map-get($type-sizes, 32) !default;
$ts-36: map-get($type-sizes, 36) !default;
$ts-41: map-get($type-sizes, 41) !default;
$ts-46: map-get($type-sizes, 46) !default;
$ts-52: map-get($type-sizes, 52) !default;

// Type scale aliases

$ts-xxs: $ts-12 !default;
$ts-xs: $ts-14 !default;
$ts-base: $ts-16 !default;
$ts-sm: $ts-20 !default;
$ts-md: $ts-26 !default;
$ts-lg: $ts-32 !default;
$ts-xl: $ts-41 !default;
$ts-xxl: $ts-52 !default;

// Font weight variables

$font-weight-bold: 700;
$font-weight-regular: 400;

$colors: (
  white: #ffffff,
  cream: #edebeb,
  crimson: #990000,
  black: #243142,
  black-000: #f7f7f8,
  black-100: #ebecee,
  black-200: #c4c7cc,
  black-300: #a7abb3,
  black-400: #8b919b,
  black-500: #707784,
  black-600: #565f6d,
  black-700: #3d4757,
  black-800: #243142, //color-black
  black-900: #161c24,
  blue: #006298,
  blue-000: #edf1f6,
  blue-100: #dce3ee,
  blue-200: #b8c8dc,
  blue-300: #95adcb,
  blue-400: #7194ba,
  blue-500: #497ba9,
  blue-600: #006298, // color-blue
  blue-700: #134a71,
  blue-800: #16324b,
  blue-900: #121c28,
  green: #008a28,
  green-000: #eaf3e8,
  green-100: #d4e8d2,
  green-200: #aad1a7,
  green-300: #7eb97c,
  green-400: #50a253,
  green-500: #008a28, // color-green
  green-600: #116d23,
  green-700: #16521d,
  green-800: #153717,
  green-900: #111f0f,
  yellow: #f5bb17,
  yellow-000: #ffeecd,
  yellow-100: #ffdd9b,
  yellow-200: #f5bb17, // color-yellow
  yellow-300: #d6a31a,
  yellow-400: #b58a1b,
  yellow-500: #94721b,
  yellow-600: #765a19,
  yellow-700: #584416,
  yellow-800: #3c2e13,
  yellow-900: #221b0c,
  orange: #df3603,
  orange-000: #ffece5,
  orange-100: #ffd9cc,
  orange-200: #ffb49a,
  orange-300: #fa8e6b,
  orange-400: #ef663c,
  orange-500: #df3603, // color-orange
  orange-600: #b02f0a,
  orange-700: #82270d,
  orange-800: #571e0c,
  orange-900: #2f1407
) !default;

// Base colors
$color-white: map-get($colors, white) !default;

// Brand Colors
$color-cream: map-get($colors, cream) !default;
$color-crimson: map-get($colors, crimson) !default;

// Black variants

$color-black: map-get($colors, black) !default;
$color-black-000: map-get($colors, black-000) !default; // Lightened slightly to use for backgrounds
$color-black-100: map-get($colors, black-100) !default; // Lightened slightly
$color-black-200: map-get($colors, black-200) !default;
$color-black-300: map-get($colors, black-300) !default;
$color-black-400: map-get($colors, black-400) !default; //Meets 3.5 contrast ratio for non-text interactive elements (form borders)
$color-black-500: map-get($colors, black-500) !default;
$color-black-600: map-get($colors, black-600) !default;
$color-black-700: map-get($colors, black-700) !default;
$color-black-800: map-get($colors, black-800) !default;
$color-black-900: map-get($colors, black-900) !default;

// Blue variants (See note above about "Midnight") $color-blue-600 = new Midnight

// Base color from brand palette. All color scale colors generated from this.
// Internal use only: Use $color-blue-600 in all components to reference
// the base blue.

$color-blue: map-get($colors, blue) !default; // Luminosity 604

$color-blue-000:  map-get($colors, blue-000) !default;
$color-blue-100:  map-get($colors, blue-100) !default;
$color-blue-200:  map-get($colors, blue-200) !default;
$color-blue-300:  map-get($colors, blue-300) !default;
$color-blue-400:  map-get($colors, blue-400) !default;
$color-blue-500:  map-get($colors, blue-500) !default;
// Replacing generated color here with base brand color since they are
// perceivably the same. Generated value was #076399
$color-blue-600:  map-get($colors, blue-600) !default;
$color-blue-700: map-get($colors, blue-700) !default;
$color-blue-800: map-get($colors, blue-800) !default;
$color-blue-900: map-get($colors, blue-900) !default;

// Green variants

// Base color from brand palette. All color scale colors generated from this.
// Internal use only: Use $color-green-500 in all components to reference
// the base green.

$color-green: map-get($colors, green) !default; // Luminosity 501

$color-green-000: map-get($colors, green-000) !default;
$color-green-100: map-get($colors, green-100) !default;
$color-green-200: map-get($colors, green-200) !default;
$color-green-300: map-get($colors, green-300) !default;
$color-green-400: map-get($colors, green-400) !default;
// Replacing generated color here with base brand color since they are
// perceivably the same. Generated value was #028a28
$color-green-500: map-get($colors, green) !default;
$color-green-600: map-get($colors, green-600) !default;
$color-green-700: map-get($colors, green-700) !default;
$color-green-800: map-get($colors, green-800) !default;
$color-green-900: map-get($colors, green-900) !default;

// Yellow variants

// Base color from brand palette. All color scale colors generated from this.
// Internal use only: Use $color-yellow-200 in all components to reference
// the base yellow.

$color-yellow: map-get($colors, yellow) !default; // Luminosity 209

$color-yellow-000: map-get($colors, yellow-000) !default;
$color-yellow-100: map-get($colors, yellow-100) !default;
// Replacing generated color here with base brand color since they are
// perceivably the same. Generated value was #f7be29
$color-yellow-200: map-get($colors, yellow-200) !default;
$color-yellow-300: map-get($colors, yellow-300) !default;
$color-yellow-400: map-get($colors, yellow-400) !default;
$color-yellow-500: map-get($colors, yellow-500) !default;
$color-yellow-600: map-get($colors, yellow-600) !default;
$color-yellow-700: map-get($colors, yellow-700) !default;
$color-yellow-800: map-get($colors, yellow-800) !default;
$color-yellow-900: map-get($colors, yellow-900) !default;

// Orange variants

// Base color from brand palette. All color scale colors generated from this.
// Internal use only: Use $color-orange-500 in all components to reference
// the base orange.

$color-orange: map-get($colors, orange) !default; // Luminosity 501

$color-orange-000: map-get($colors, orange-000) !default;
$color-orange-100: map-get($colors, orange-100) !default;
$color-orange-200: map-get($colors, orange-200) !default;
$color-orange-300: map-get($colors, orange-300) !default;
$color-orange-400: map-get($colors, orange-400) !default;
// Replacing generated color here with base brand color since they are
// perceivably the same. Generated value was #df3704
$color-orange-500: map-get($colors, orange) !default;
$color-orange-600: map-get($colors, orange-600) !default;
$color-orange-700: map-get($colors, orange-700) !default;
$color-orange-800: map-get($colors, orange-800) !default;
$color-orange-900: map-get($colors, orange-900) !default;

// Global spacing units

$spacing-unit: .5rem !default;        // 8px

$xxs: $spacing-unit/2 !default;       // 4px
$xs: $spacing-unit !default;          // 8px
$sm: $spacing-unit * 2 !default;      // 16px Base
$md: $spacing-unit * 3 !default;      // 24px
$lg: $spacing-unit * 4 !default;      // 32px
$xl: $spacing-unit * 5 !default;      // 40px
$xxl: $spacing-unit * 8 !default;     // 64px

// Global width units derived from spacing units

$width-base: $xxl !default;    // 64px

$width-map: (
  xxs: $width-base,            // 64px Base
  xs: $width-base * 2,         // 128px
  sm: $width-base * 3,         // 192px
  md: $width-base * 4,         // 256px
  lg: $width-base * 5,         // 320px
  xl: $width-base * 6,         // 384px
  xxl: $width-base * 8         // 512px
) !default;

$width-xxs: map-get($width-map, 'xxs');
$width-xs: map-get($width-map, 'xs');
$width-sm: map-get($width-map, 'sm');
$width-md: map-get($width-map, 'md');
$width-lg: map-get($width-map, 'lg');
$width-xl: map-get($width-map, 'xl');
$width-xxl: map-get($width-map, 'xxl');

// Global breakpoints

$breakpoints: (
  sm: (480em/16),
  md: (740em/16),
  lg: (1080em/16),
  xl: (1260em/16),
  xxl: (1400em/16)
) !default;

$breakpoint-sm: map-get($breakpoints, 'sm');
$breakpoint-md: map-get($breakpoints, 'md');
$breakpoint-lg: map-get($breakpoints, 'lg');
$breakpoint-xl: map-get($breakpoints, 'xl');
$breakpoint-xxl: map-get($breakpoints, 'xxl');

// z-index map
// Starts and 0 and works up to 1000. Leaving some space between intervals
// here so that we can add fine tune adjustments when/if needed
// but, hopefully not.
//
// E.g. z-250: 250.

$z-index: (
  z-0: 0,
  z-100: 100,
  z-200: 200,
  z-300: 300,
  z-400: 400,
  z-500: 500,
  z-600: 600,
  z-700: 700,
  z-800: 800,
  z-900: 900,
  z-1000: 1000
) !default;

// Standard shadow(s)

$shadow-base: 0 1px 3px 2px rgba(36, 49, 66, .1);
