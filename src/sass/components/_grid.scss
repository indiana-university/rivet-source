// Copyright (C) 2018 The Trustees of Indiana University
// SPDX-License-Identifier: BSD-3-Clause

// These Sass maps are used for all the basic grid set up.

// Grid columns map
$grid-columns: (
  '1': 8.333,
  '2': 16.6667,
  '3': 25,
  '4': 33.3333,
  '5': 41.6667,
  '6': 50,
  '7': 58.3333,
  '8': 66.6667,
  '9': 75,
  '10': 83.3333,
  '11': 91.6667,
  '12': 100
);

// Grid sizes map.
//
// These are the max-widths of the grid. Feel free to add more
// sizes/key: value pairs that can then be used on the .grid container
// like, .grid .grid--yournewsize.

$grid-widths: (
  'freshman': 640px,
  'sophomore': 1024px,
  'junior': 1140px,
  'senior': 1380px
);

// Global grid gutter. Set this to half of what you want the final gutter to be.
$gutter: $md / 2;

// Starting on some mixins to build grid classes and to make
// available for those who want to use the Sass source
// source files in their app.

@mixin container($width: 100%) {
  max-width: $width;
  padding-right: $gutter * 2;
  padding-left: $gutter * 2;
}

@mixin grid {
  display: flex;
  flex-wrap: wrap;
  margin-right: ($gutter / -1);
  margin-left: ($gutter / -1);
}

.#{$prefix}-container {
  @include container();
}

/**
 * Contianer variants
 */

.#{$prefix}-container--center {
  margin-right: auto !important;
  margin-left: auto !important;
}

@each $key, $value in $grid-widths {
  .#{$prefix}-container--#{$key} {
    max-width: $value;
  }
}

.#{$prefix}-container--collapse {
  padding: 0;
}

/**
 * The main grid container. It's width is fluid by default.
 */

// TODO: refactor the other grid__item-* classes into mixins for those
// that want ot use the Sass source in their app.

@mixin grid-item {
  max-width: 100%;
  flex-basis: 0;
  flex-grow: 1;
  padding: 0 $gutter;
  position: relative;
}

.#{$prefix}-grid {
  @include grid;

  &__item {
    @include grid-item;
  }

  &__item--last {
    margin-left: auto;
  }

  [class^='#{$prefix}-grid__item'] {
    /**
     * This keeps the grid from collapsing when items inside are too
     * big for their parent .#{$prefix}-grid__item.
     */
    min-width: 0;
  }
}

/**
 * This modifier will right align grid__item(s) that add up to less
 * than 12 columns in total.
 */

.#{$prefix}-grid--right {
  justify-content: flex-end;
}

%auto-grid-props {
  width: 100%;
  position: relative;
  padding: 0 $gutter;
}

@each $bp-name, $bp-size in $breakpoints {
  .#{$prefix}-grid__item-#{$bp-name} {
    @extend %auto-grid-props;
  }
}

@each $bp-name, $bp-size in $breakpoints {
  @include mq($bp-size) {
    .#{$prefix}-grid__item-#{$bp-name} {
      max-width: 100%;
      flex-basis: 0;
      flex-grow: 1;
    }
  }
}

/**
 * Build the base grid item classes. These will make
 * grid items span the same number of columns at ALL
 * screen sizes.
 */

/**
 * We need to extend these properties on to all of the responsive grid
 * classes on mobile first so we'll define them here in a silent class
 * and let Sass build the comma-separated list of selectors
 */

%item-properties {
  position: relative;
  padding: 0 $gutter;
  width: 100%;
}

@each $columns, $width in $grid-columns {
  .#{$prefix}-grid__item-#{$columns} {
    flex-basis: $width * 1%;
    max-width: $width * 1%;

    @extend %item-properties;
  }
}

/**
 * Now loop through all the breakpoints.
 */

/* stylelint-disable */
@each $bp-name, $bp-size in $breakpoints {
  @each $columns, $width in $grid-columns {
    .#{$prefix}-grid__item-#{$columns}-#{$bp-name}-up {
      @extend %item-properties;
    }
  }
}

@each $bp-name, $bp-size in $breakpoints {
  @if $bp-name == 'sm' {
    @each $columns, $width in $grid-columns {
      .#{$prefix}-grid__item-#{$columns}-sm-up {
        flex-basis: $width * 1%;
        max-width: $width * 1%;
      }
    }
  }

  @else {
    @include mq($bp-size) {
      @each $columns, $width in $grid-columns {
        .#{$prefix}-grid__item-#{$columns}-#{$bp-name}-up {
          flex-basis: $width * 1%;
          max-width: $width * 1%;
        }
      }
    }
  }
}

// Push and pull utilities

@each $columns, $width in $grid-columns {
  .#{$prefix}-grid__item-push-#{$columns} {
    left: $width * 1%;
  }
}

@each $columns, $width in $grid-columns {
  .#{$prefix}-grid__item-pull-#{$columns} {
    right: $width * 1%;
  }
}

@each $bp-name, $bp-size in $breakpoints {
  // NOTE: This is sort of repetitive because you could use the number
  // suffix only (see above) to push and pull on small screens,
  // but it seems like both should have the same behavior
  // as a convenience.
  @if $bp-name == 'sm' {
    @each $columns, $width in $grid-columns {
      .#{$prefix}-grid__item-push-#{$columns}-#{$bp-name} {
        left: $width * 1%;
      }
    }

    @each $columns, $width in $grid-columns {
      .#{$prefix}-grid__item-pull-#{$columns}-#{$bp-name} {
        right: $width * 1%;
      }
    }
  }

  @else {
    @include mq($bp-size) {
      @each $columns, $width in $grid-columns {
        .#{$prefix}-grid__item-push-#{$columns}-#{$bp-name} {
          left: $width * 1%;
        }
      }

      @each $columns, $width in $grid-columns {
        .#{$prefix}-grid__item-pull-#{$columns}-#{$bp-name} {
          right: $width * 1%;
        }
      }
    }
  }
}

/* stylelint-enable */
