// Copyright (C) 2018 The Trustees of Indiana University
// SPDX-License-Identifier: BSD-3-Clause

// These Sass maps are used for all the basic row set up.

// Row columns map
$row-columns: (
  "1": 8.333,
  "2": 16.6667,
  "3": 25,
  "4": 33.3333,
  "5": 41.6667,
  "6": 50,
  "7": 58.3333,
  "8": 66.6667,
  "9": 75,
  "10": 83.3333,
  "11": 91.6667,
  "12": 100
);

// Row sizes map.
//
// These are the max-widths of the row. Feel free to add more
// sizes/key: value pairs that can then be used on the .row container
// like, .row .row--yournewsize.

$row-widths: (
  "sm": 640px,
  "md": 1024px,
  "lg": 1140px,
  "xl": 1380px
);

// Global row gutter. Set this to half of what you want the final gutter to be.
$gutter: $md;

// Starting on some mixins to build row classes and to make
// available for those who want to use the Sass source
// source files in their app.

@mixin container($width: 100%) {
  margin-left: auto !important;
  margin-right: auto !important;
  max-width: $width;
}

@mixin row {
  display: flex;
  flex-wrap: wrap;
  margin: 0 ($gutter/-1);
}

/**
 * Container variants
 */

@each $key, $value in $row-widths {
  .#{$prefix}-container--#{$key} {
    @include container();

    max-width: $value;
  }
}

/**
 * The main row container. It's width is fluid by default.
 */

// TODO: refactor the other row__cols-* classes into mixins for those
// that want to use the Sass source in their app.

@mixin cols {
  flex-basis: 0;
  flex-grow: 1;
  max-width: 100%;
  padding: 0 $gutter;
  position: relative;
}

.#{$prefix}-row {
  @include row;

  &--loose {
    margin: 0 ($gutter * -1.66);
  }

  &--tight {
    margin: 0 ($gutter/-2);
  }

  .#{$prefix}-cols {
    @include cols;
  }

  .#{$prefix}-cols--last {
    margin-left: auto;
  }

  [class^="#{$prefix}-cols"] {
    /**
     * This keeps the row from collapsing when cols inside are too
     * big for their parent .#{$prefix}-row__cols.
     */
    min-width: 0;
  }

  &--loose > [class^="#{$prefix}-cols"] {
    padding: 0 ($gutter * 1.66);
  }

  &--tight > [class^="#{$prefix}-cols"] {
    padding: 0 ($gutter/2);
  }
}

/**
 * This modifier will right align row__cols(s) that add up to less
 * than 12 columns in total.
 */

.#{$prefix}-cols--right {
  justify-content: flex-end;
}

%auto-row-props {
  padding: 0 $gutter;
  position: relative;
  width: 100%;
}

@each $bp-name, $bp-size in $breakpoints {
  .#{$prefix}-cols-#{$bp-name} {
    @extend %auto-row-props;
  }
}

@each $bp-name, $bp-size in $breakpoints {
  @include mq($bp-size) {
    .#{$prefix}-cols-#{$bp-name} {
      flex-basis: 0;
      flex-grow: 1;
      max-width: 100%;
    }
  }
}

/**
 * Build the base row cols classes. These will make
 * row cols span the same number of columns at ALL
 * screen sizes.
 */

/**
 * We need to extend these properties on to all of the responsive row
 * classes on mobile first so we'll define them here in a silent class
 * and let Sass build the comma-separated list of selectors
 */

%cols-properties {
  padding: 0 $gutter;
  position: relative;
  width: 100%;
}

@each $columns, $width in $row-columns {
  .#{$prefix}-cols-#{$columns} {
    flex-basis: $width * 1%;
    max-width: $width * 1%;

    @extend %cols-properties;
  }
}

/**
 * Now loop through all the breakpoints.
 */

/* stylelint-disable */
@each $bp-name, $bp-size in $breakpoints {
  @each $columns, $width in $row-columns {
    .#{$prefix}-cols-#{$columns}-#{$bp-name} {
      @extend %cols-properties;
    }
  }
}

@each $bp-name, $bp-size in $breakpoints {
  @if $bp-name == "sm" {
    @each $columns, $width in $row-columns {
      .#{$prefix}-cols-#{$columns}-sm {
        flex-basis: $width * 1%;
        max-width: $width * 1%;
      }
    }
  }

  @else {
    @include mq($bp-size) {
      @each $columns, $width in $row-columns {
        .#{$prefix}-cols-#{$columns}-#{$bp-name} {
          flex-basis: $width * 1%;
          max-width: $width * 1%;
        }
      }
    }
  }
}

// Push and pull utilities

@each $columns, $width in $row-columns {
  .#{$prefix}-cols-push-#{$columns} {
    left: $width * 1%;
  }
}

@each $columns, $width in $row-columns {
  .#{$prefix}-cols-pull-#{$columns} {
    right: $width * 1%;
  }
}

@each $bp-name, $bp-size in $breakpoints {
  // NOTE: This is sort of repetitive because you could use the number
  // suffix only (see above) to push and pull on small screens,
  // but it seems like both should have the same behavior
  // as a convenience.
  @if $bp-name == "sm" {
    @each $columns, $width in $row-columns {
      .#{$prefix}-cols-push-#{$columns}-#{$bp-name} {
        left: $width * 1%;
      }
    }

    @each $columns, $width in $row-columns {
      .#{$prefix}-cols-pull-#{$columns}-#{$bp-name} {
        right: $width * 1%;
      }
    }
  }

  @else {
    @include mq($bp-size) {
      @each $columns, $width in $row-columns {
        .#{$prefix}-cols-push-#{$columns}-#{$bp-name} {
          left: $width * 1%;
        }
      }

      @each $columns, $width in $row-columns {
        .#{$prefix}-cols-pull-#{$columns}-#{$bp-name} {
          right: $width * 1%;
        }
      }
    }
  }
}

/* stylelint-enable */
